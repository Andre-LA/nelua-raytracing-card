-- super tiny raytracing that fits on a bussiness card (well, not yet)
-- original code and comments: https://fabiensanglard.net/rayTracing_back_of_business_card/
-- inspiration: https://github.com/edubart/lunray

-- this code is very "raw C-ish" and should not be considered a good nelua code

## cinclude '<stdio.h>'
local function printf_iii(fmt: cstring, arg1: cint, arg2: cint, arg3: cint) <cimport'printf', nodecl> end

require 'math'

-------------------------------------------------
-- define a vector record
local vec = @record{
   x: number,
   y: number,
   z: number
}

-- vector add
function vec.__add(self: vec, r: vec): vec
   return (@vec){ self.x + r.x, self.y + r.y, self.z + r.z }
end

-- vector scaling
function vec.__mul(self: vec, r: number): vec
   return (@vec){ self.x * r, self.y * r, self.z * r }
end

-- vector dot product
function vec.__mod(self: vec, r: vec): number
   return self.x * r.x + self.y * r.y + self.z * r.z
end

-- cross product
function vec.__bxor(self: vec, r: vec): vec
   return (@vec){ self.y * r.z - self.z * r.y, self.z * r.x - self.x * r.z, self.x * r.y - self.y * r.x }
end

-- used later for normalizing
function vec.__len(self: vec): vec
   return self * (1 / math.sqrt(self % self))
end
-------------------------------------------------

-- the set of sphere positions describing the world.
-- those integers are in fact bit vectors
local G: integer[9] = {247570, 280596, 280600, 249748, 18578, 18577, 231184, 16, 16}
--[[
   16                    1
   16                    1
   231184   111    111   1
   18577       1  1   1  1   1
   18578       1  1   1  1  1
   249748   1111  11111  1 1
   280600  1   1  1      11
   280596  1   1  1      1 1
   247570   1111   111   1  1
]]

-- random generator, return a number within range [0-1]
local function R(): number <inline> return math.random() end
-------------------------------------------------
-- the intersection test for line [o, v]
-- return 2 if a hit was found (and also return distance t and bouncing ray n)
-- return 0 if no hit was found but ray goes upward
-- return 1 if no hit was found but ray goes downward
local function T(o: vec, d: vec, t: number*, n: vec*): integer
   $t = 1e9
   local m: integer = 0

   local p: number = -o.z / d.z
   if 0.01 < p then
      $t = p
      $n = (@vec){0,0,1}
      m = 1
   end

   -- the world is encoded in G, with 9 lines and 19 columns
   for k = 18, 0, -1 do
      for j = 8, 0, -1 do
         if G[j] & (1 << k) == 1 then -- for this line j, is there a sphere at column i?
            local p: vec = o + (@vec){-k, 0, -j-4}
            local b: number = p % d
            local c: number = p % p - 1
            local q: number = b * b - c

            -- does the ray hit the sphere?
            if q > 0 then
               -- it does, compute the distance camera-sphere
               local s: number = -b - math.sqrt(q)

               if s < $t and s > 0.01 then
                  -- so far this is the minimum distance, save it. And also
                  -- compute the bouncing ray vector into 'n'
                  $t = s
                  $n = # (p + d * $t)
                  m = 2
               end
            end
         end
      end
   end

   return m
end
-------------------------------------------------
-- (S)ample the world and return the pixel color for
-- a ray passing by point o (origin) and d (direction)
local function S(o: vec, d: vec): vec
   local t: number;
   local n: vec;

   -- search for an intersection ray vs world
   local m: integer = T(o, d, &t, &n)

   if m == 0 then -- no sphere found and the ray goes upward: generate a sky color
      return (@vec){0.7, 0.6, 1} * ((1 - d.z) ^ 4)
   end

   -- a sphere was maybe hit
   local h: vec = o + d * t                                 -- h = intersection coordinate
   local l: vec = # ((@vec){9 + R(), 9 + R(), 16} + h * -1) -- 'l' = direction to light (random delta for shadows)
   local r: vec = d + n * (n % d * -2)                      -- r = the half-vector

   -- calculated the lambertian vector
   local b: number = l % n

   -- calculate illumination factor (lambertian coefficient > 0 or in shadow)?
   if b < 0 or T(h, l, &t, &n) ~= 0 then
      b = 0
   end

   -- calculate the color 'p' with diffuse and specular component
   local _bgz: integer = (b>0) and 1 or 0
   local p: number = (l % r * _bgz) ^ 99

   if m & 1 == 1 then
      h = h * 0.2 -- no sphere was hit and the ray was going downward: Generate a floor color
      local _cr: integer = (@integer)(math.ceil(h.x) + math.ceil(h.y))
      local v: vec = (_cr & 1 == 1) and (@vec){1,1,1} or (@vec){3,3,3}
      return v * (b * 0.2 + 0.1)
   end

   -- m == 2 A sphere was hit. cast an ray bouncing from the sphere surface.
   return (@vec){p,p,p} + S(h, r) * 0.5
end
-------------------------------------------------
-- the main funciton. It generates a PPM image to stdout.
-- usage of the program is hence: ./card > erk.ppm
local function main()
   print 'P6 512 512 255'

   -- the # operator are for normalizing each vectors with # operator.
   -- camera direction
   local g = # ((@vec){-6, -16, 0})

   local a = # (((@vec){0, 0, 1} ~ g) * 0.002)

   -- the right vector, obtained via traditional cross-product
   local b = # ((g ~ a) * 0.002)

   local c = (a+b) * -256 + g

   for y = 512, 0, -1 do -- for each column
      for x = 512, 0, -1 do -- for each pixel in a line
         -- reuse the vector record to stra not XYZ but a RGB pixel color
         local p: vec = {13, 13, 13}

         -- cast 64 rays per pixel (for blue (stochastic sampling) and soft-shadows)
         for r = 64, 0, -1 do
            -- the delta to apply to the origin of the view (for Depth of View blur).
            local t: vec = a * (R() - 0.5) * 99 + b * (R() * -0.5) * 99 -- a little bit of delta

            -- set a camera focal point v(17, 16, 8) and cast the ray
            -- accumulate the color returned in the p variable
            p = S(
               (@vec){17, 16, 8} + t, -- ray origin
               # (t * -1 + (a * (R() + x) + b * (y + R()) + c) * 16) -- ray direction with random deltas for stochastic sampling
            ) * 3.5 + p -- +p for color accumulation

         end

         printf_iii('%c%c%c', (@cint)(p.x), (@cint)(p.y), (@cint)(p.z))
      end
   end
end

main()
